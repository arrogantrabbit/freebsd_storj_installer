#!/bin/sh

STORAGENODE_UPDATE_INTERVAL_SECONDS=900
STORAGENODE_VERSION_CHECK_URL="https://version.storj.io"
TARGET_BIN_DIR="/usr/local/bin"
GH_API_URL="https://api.github.com/repos/storj/storj/releases/latest"

: "${storagenode_node_binary_location:="/usr/local/bin/storagenode"}"
: "${storagenode_updater_node_service_name:="storagenode"}"

echo "Starting replacement storagenode updater (PID: $$)"

# Function to verify checksum
verify_checksum() {
  local file=$1
  local expected_checksum=$2

  if [ -n "${expected_checksum}" ]; then
    echo "$(date +'%Y-%m-%d %H:%M:%S') Verifying checksum for ${file}"
    file_checksum=$(sha256 -q "${file}")
    if [ "${file_checksum}" != "${expected_checksum}" ]; then
      echo "$(date +'%Y-%m-%d %H:%M:%S') Checksum verification failed for ${file}"
      echo "Expected: ${expected_checksum}"
      echo "Actual: ${file_checksum}"
      return 1
    fi
    echo "$(date +'%Y-%m-%d %H:%M:%S') Checksum verification successful"
    return 0
  fi
  return 0
}

# Function to restart service with verification
restart_service() {
  local service_name=$1

  echo "$(date +'%Y-%m-%d %H:%M:%S') Restarting service $service_name"
  if ! service "$service_name" restart; then
    echo "$(date +'%Y-%m-%d %H:%M:%S') Service restart failed"
    return 1
  fi

  # Verify service is running
  if ! service "$service_name" status | grep -q "is running"; then
    echo "$(date +'%Y-%m-%d %H:%M:%S') Service status check failed"
    return 1
  fi

  echo "$(date +'%Y-%m-%d %H:%M:%S') Service restart successful"
  return 0
}

while true; do
    # { "version": "1.59.1", "url": "https://github.com/storj/storj/releases/download/v1.59.1/storagenode_{os}_{arch}.zip" }
    suggested=$(curl -L "${STORAGENODE_VERSION_CHECK_URL}" 2>/dev/null | jq -r '.processes.storagenode.suggested')
    if [ $? -ne 0 ] || [ -z "$suggested" ]; then
        echo "$(date +'%Y-%m-%d %H:%M:%S') Failed to determine suggested version"
        goto_sleep
        continue
    fi

    current_version=$(${storagenode_node_binary_location} version 2>/dev/null | sed -n 's/Version: v\(.*\)/\1/p')
    suggested_version=$(echo "$suggested" | jq -r '.version')
    echo "$(date +'%Y-%m-%d %H:%M:%S') Versions: current=$current_version, suggested=$suggested_version"

    if [ -z "${suggested_version}" ] || [ "${current_version}" = "${suggested_version}" ]; then
        goto_sleep
    else
        download_url=$(echo "$suggested" | jq -r '.url' | sed "s/[{]arch[}]/amd64/g" | sed "s/[{]os[}]/freebsd/g")
        echo "$(date +'%Y-%m-%d %H:%M:%S') Download URL: $download_url"

        # Get checksum from GitHub API
        gh_data=$(curl -L "${GH_API_URL}" 2>/dev/null)
        if [ $? -ne 0 ] || [ -z "$gh_data" ]; then
            echo "$(date +'%Y-%m-%d %H:%M:%S') Failed to get checksum information"
            goto_sleep
            continue
        fi

        storagenode_checksum=$(echo "${gh_data}" | jq -r --arg url "$(basename ${download_url})" '.assets[] | select(.name == $url) | .digest')

        if [ -z "${storagenode_checksum}" ]; then
            echo "$(date +'%Y-%m-%d %H:%M:%S') Failed to determine checksum for downloaded file"
            goto_sleep
        else
            temp_sub_folder="/tmp/${suggested_version}"
            if ! mkdir -p "${temp_sub_folder}"; then
                echo "$(date +'%Y-%m-%d %H:%M:%S') Failed to create temporary directory"
                goto_sleep
                continue
            fi

            zipfile="${temp_sub_folder}/$(basename "${download_url}")"

            # Download with curl's built-in retry
            echo "$(date +'%Y-%m-%d %H:%M:%S') Downloading $download_url"
            if ! curl --retry 3 --remove-on-error -L "$download_url" -o "$zipfile"; then
                echo "$(date +'%Y-%m-%d %H:%M:%S') Download failed after retries"
                rm -f "${zipfile}"
                goto_sleep
                continue
            fi

            # Verify checksum before extracting
            if ! verify_checksum "${zipfile}" "${storagenode_checksum}"; then
                echo "$(date +'%Y-%m-%d %H:%M:%S') Checksum verification failed, removing corrupted file"
                rm -f "${zipfile}"
                goto_sleep
                continue
            fi

            echo "$(date +'%Y-%m-%d %H:%M:%S') Extracting archive to ${TARGET_BIN_DIR}"
            if ! unzip -d "${TARGET_BIN_DIR}" -o "${zipfile}"; then
                echo "$(date +'%Y-%m-%d %H:%M:%S') Extraction failed"
                rm -f "${zipfile}"
                goto_sleep
                continue
            fi

            # Clean up temporary file
            rm -f "${zipfile}"

            # Restart service with verification
            if ! restart_service "${storagenode_updater_node_service_name}"; then
                echo "$(date +'%Y-%m-%d %H:%M:%S') Service restart failed, update incomplete"
                goto_sleep
                continue
            fi

            echo "$(date +'%Y-%m-%d %H:%M:%S') Update completed successfully"
        fi
    fi

    goto_sleep
done

# Helper function to handle sleep with proper logging
goto_sleep() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') No update needed, sleeping for $STORAGENODE_UPDATE_INTERVAL_SECONDS seconds"
    sleep "$STORAGENODE_UPDATE_INTERVAL_SECONDS"
}
